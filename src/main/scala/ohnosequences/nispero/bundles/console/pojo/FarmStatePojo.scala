package ohnosequences.nispero.bundles.console.pojo

import com.amazonaws.services.dynamodbv2.datamodeling._
import java.util.Date
import java.text.SimpleDateFormat

//this is class is work around for DynamoDBObjectMapper
case class FarmState(date: String, timestamp: Long, idleInstances: Int, processingInstances: Int, installingInstances: Int) {
  def toPojo: FarmStatePojo = {
    new FarmStatePojo()
      .withTimestamp(timestamp)
      .withIdleInstances(idleInstances)
      .withProcessingInstances(processingInstances)
      .withInstallingInstances(installingInstances)
  }
}

object FarmState {
  def fromPojo(pojo: FarmStatePojo) = FarmState(
    date = pojo.getDate,
    timestamp = pojo.getTimestamp,
    idleInstances = pojo.getIdleInstances,
    processingInstances = pojo.getProcessingInstances,
    installingInstances = pojo.getInstallingInstances
  )
}

@DynamoDBTable(tableName = "FarmState")
class FarmStatePojo {

  var id = 1L
  var timestamp = System.currentTimeMillis()

  var installingInstances = 0
  var idleInstances = 0
  var processingInstances = 0
 // var openRequests = 0

  @DynamoDBHashKey
  @DynamoDBAutoGeneratedKey
  def getId = id

  def setId(id: Long) { this.id = id }

  @DynamoDBRangeKey
  @DynamoDBAutoGeneratedKey
  def getTimestamp = timestamp
  def setTimestamp(timestamp: Long) { this.timestamp = timestamp }
  def withTimestamp(timestamp: Long) = { this.timestamp = timestamp; this }

  @DynamoDBAttribute
  def getInstallingInstances = installingInstances
  def setInstallingInstances(installingInstances: Int) { this.installingInstances = installingInstances }
  def withInstallingInstances(installingInstances: Int) = { this.installingInstances = installingInstances; this }

  @DynamoDBAttribute
  def getIdleInstances = idleInstances
  def setIdleInstances(idleInstances: Int) { this.idleInstances = idleInstances }
  def withIdleInstances(idleInstances: Int) = { this.idleInstances = idleInstances; this }

  @DynamoDBAttribute
  def getProcessingInstances = processingInstances
  def setProcessingInstances(processingInstances: Int) { this.processingInstances = processingInstances }
  def withProcessingInstances(processingInstances: Int) = { this.processingInstances = processingInstances; this }

//  @DynamoDBAttribute
//  def getOpenRequests = openRequests
//  def setOpenRequests(openRequests: Int) { this.openRequests = openRequests }
//  def withOpenRequests(openRequests: Int) = { this.openRequests = openRequests; this }

  val format: SimpleDateFormat = new SimpleDateFormat("HH:mm:ss")

  @DynamoDBIgnore
  def getDate: String = {
    format.format(new Date(timestamp))
  }

  def withDate(rawDate: String) = this.withTimestamp(format.parse(rawDate).getTime)

}
